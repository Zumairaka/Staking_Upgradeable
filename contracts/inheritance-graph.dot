digraph "" {
AccessControlUpgradeable -> Initializable [ label="1" ];
AccessControlUpgradeable -> ContextUpgradeable [ label="2" ];
AccessControlUpgradeable -> IAccessControlUpgradeable [ label="3" ];
AccessControlUpgradeable -> ERC165Upgradeable [ label="4" ];
AccessControlUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AccessControlUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    hasRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getRoleAdmin(bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    grantRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    revokeRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    renounceRole(bytes32,address)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __AccessControl_init()</TD></TR><TR><TD align="left">    __AccessControl_init_unchained()</TD></TR><TR><TD align="left">    _checkRole(bytes32,address)</TD></TR><TR><TD align="left">    _setupRole(bytes32,address)</TD></TR><TR><TD align="left">    _setRoleAdmin(bytes32,bytes32)</TD></TR><TR><TD align="left">    _grantRole(bytes32,address)</TD></TR><TR><TD align="left">    _revokeRole(bytes32,address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DEFAULT_ADMIN_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR><TR><TD align="left">    _roles</TD></TR></TABLE> >];

IAccessControlUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IAccessControlUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    hasRole(bytes32,address)</TD></TR><TR><TD align="left">    getRoleAdmin(bytes32)</TD></TR><TR><TD align="left">    grantRole(bytes32,address)</TD></TR><TR><TD align="left">    revokeRole(bytes32,address)</TD></TR><TR><TD align="left">    renounceRole(bytes32,address)</TD></TR></TABLE> >];

OwnableUpgradeable -> Initializable [ label="1" ];
OwnableUpgradeable -> ContextUpgradeable [ label="2" ];
OwnableUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>OwnableUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    renounceOwnership()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Ownable_init()</TD></TR><TR><TD align="left">    __Ownable_init_unchained()</TD></TR><TR><TD align="left">    _setOwner(address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR><TR><TD align="left">    _owner</TD></TR></TABLE> >];

Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _initialized</TD></TR><TR><TD align="left">    _initializing</TD></TR></TABLE> >];

ReentrancyGuardUpgradeable -> Initializable;
ReentrancyGuardUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuardUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ReentrancyGuard_init()</TD></TR><TR><TD align="left">    __ReentrancyGuard_init_unchained()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _NOT_ENTERED</TD></TR><TR><TD align="left">    _ENTERED</TD></TR><TR><TD align="left">    _status</TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

ERC20Upgradeable -> Initializable [ label="1" ];
ERC20Upgradeable -> ContextUpgradeable [ label="2" ];
ERC20Upgradeable -> IERC20Upgradeable [ label="3" ];
ERC20Upgradeable -> IERC20MetadataUpgradeable [ label="4" ];
ERC20Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC20Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    decimals()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    totalSupply()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transfer(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    allowance(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left">    increaseAllowance(address,uint256)</TD></TR><TR><TD align="left">    decreaseAllowance(address,uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC20_init(string,string)</TD></TR><TR><TD align="left">    __ERC20_init_unchained(string,string)</TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(address,uint256)</TD></TR><TR><TD align="left">    _approve(address,address,uint256)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left">    _afterTokenTransfer(address,address,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _allowances</TD></TR><TR><TD align="left">    _totalSupply</TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR></TABLE> >];

IERC20Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

IERC20MetadataUpgradeable -> IERC20Upgradeable;
IERC20MetadataUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20MetadataUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    decimals()</TD></TR></TABLE> >];

ContextUpgradeable -> Initializable;
ContextUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ContextUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Context_init()</TD></TR><TR><TD align="left">    __Context_init_unchained()</TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

StringsUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>StringsUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _HEX_SYMBOLS</TD></TR></TABLE> >];

ERC165Upgradeable -> Initializable [ label="1" ];
ERC165Upgradeable -> IERC165Upgradeable [ label="2" ];
ERC165Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC165Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC165_init()</TD></TR><TR><TD align="left">    __ERC165_init_unchained()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

IERC165Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC165Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    supportsInterface(bytes4)</TD></TR></TABLE> >];

AccessControl -> Context [ label="1" ];
AccessControl -> IAccessControl [ label="2" ];
AccessControl -> ERC165 [ label="3" ];
AccessControl[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AccessControl</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    hasRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getRoleAdmin(bytes32)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    grantRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    revokeRole(bytes32,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    renounceRole(bytes32,address)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkRole(bytes32,address)</TD></TR><TR><TD align="left">    _setupRole(bytes32,address)</TD></TR><TR><TD align="left">    _setRoleAdmin(bytes32,bytes32)</TD></TR><TR><TD align="left">    _grantRole(bytes32,address)</TD></TR><TR><TD align="left">    _revokeRole(bytes32,address)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DEFAULT_ADMIN_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _roles</TD></TR></TABLE> >];

IAccessControl[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IAccessControl</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    hasRole(bytes32,address)</TD></TR><TR><TD align="left">    getRoleAdmin(bytes32)</TD></TR><TR><TD align="left">    grantRole(bytes32,address)</TD></TR><TR><TD align="left">    revokeRole(bytes32,address)</TD></TR><TR><TD align="left">    renounceRole(bytes32,address)</TD></TR></TABLE> >];

ReentrancyGuard[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ReentrancyGuard</B></TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    nonReentrant()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _NOT_ENTERED</TD></TR><TR><TD align="left">    _ENTERED</TD></TR><TR><TD align="left">    _status</TD></TR></TABLE> >];

Context[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Context</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR></TABLE> >];

Strings[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Strings</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _HEX_SYMBOLS</TD></TR></TABLE> >];

ERC165 -> IERC165;
ERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR></TABLE> >];

IERC165[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC165</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    supportsInterface(bytes4)</TD></TR></TABLE> >];

NFTYStaking -> AccessControl [ label="1" ];
NFTYStaking -> ReentrancyGuard [ label="2" ];
NFTYStaking[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>NFTYStaking</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    stakeTokens(uint256)</TD></TR><TR><TD align="left">    claimRewards()</TD></TR><TR><TD align="left">    unstakeAll()</TD></TR><TR><TD align="left">    transferAllTokens()</TD></TR><TR><TD align="left">    changeRate(uint8,uint256)</TD></TR><TR><TD align="left">    getRewardRates()</TD></TR><TR><TD align="left">    getPool()</TD></TR><TR><TD align="left">    getRewardRate(uint256,uint256)</TD></TR><TR><TD align="left">    unstakeTokens(uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getReward(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    _getAmount(uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    isRealAddress(address)</TD></TR><TR><TD align="left">    isRealValue(uint256)</TD></TR><TR><TD align="left">    isStaker()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    ADMIN_ROLE</TD></TR><TR><TD align="left">    StakersData</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    nftyToken<font color="blue" POINT-SIZE="10"> (NFTYToken)</font></TD></TR><TR><TD align="left">    _NFTYTokenAddress</TD></TR><TR><TD align="left">    _totalStakedToken</TD></TR><TR><TD align="left">    _rewardRate</TD></TR></TABLE> >];

NFTYStakingUpgradeable -> AccessControlUpgradeable [ label="1" ];
NFTYStakingUpgradeable -> ReentrancyGuardUpgradeable [ label="2" ];
NFTYStakingUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>NFTYStakingUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address)</TD></TR><TR><TD align="left">    stakeTokens(uint256)</TD></TR><TR><TD align="left">    claimRewards()</TD></TR><TR><TD align="left">    unstakeAll()</TD></TR><TR><TD align="left">    transferAllTokens()</TD></TR><TR><TD align="left">    changeRate(uint8,uint256)</TD></TR><TR><TD align="left">    getRewardRates()</TD></TR><TR><TD align="left">    getPool()</TD></TR><TR><TD align="left">    getRewardRate(uint256,uint256)</TD></TR><TR><TD align="left">    unstakeTokens(uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getReward(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    _getAmount(uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    isRealAddress(address)</TD></TR><TR><TD align="left">    isRealValue(uint256)</TD></TR><TR><TD align="left">    isStaker()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    ADMIN_ROLE</TD></TR><TR><TD align="left">    StakersData</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    nftyToken<font color="blue" POINT-SIZE="10"> (NFTYToken)</font></TD></TR><TR><TD align="left">    _NFTYTokenAddress</TD></TR><TR><TD align="left">    _totalStakedToken</TD></TR><TR><TD align="left">    _rewardRate</TD></TR></TABLE> >];

NFTYStakingUpgradeableTest -> AccessControlUpgradeable [ label="1" ];
NFTYStakingUpgradeableTest -> ReentrancyGuardUpgradeable [ label="2" ];
NFTYStakingUpgradeableTest[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>NFTYStakingUpgradeableTest</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(address)</TD></TR><TR><TD align="left">    stakeTokens(uint256)</TD></TR><TR><TD align="left">    claimRewards()</TD></TR><TR><TD align="left">    unstakeAll()</TD></TR><TR><TD align="left">    transferAllTokens()</TD></TR><TR><TD align="left">    changeRate(uint8,uint256)</TD></TR><TR><TD align="left">    getRewardRates()</TD></TR><TR><TD align="left">    getNewRewardRates()</TD></TR><TR><TD align="left">    getPool()</TD></TR><TR><TD align="left">    getStakerData(address)</TD></TR><TR><TD align="left">    addRank(uint8,uint256)</TD></TR><TR><TD align="left">    getRewardRate(uint256,uint256)</TD></TR><TR><TD align="left">    unstakeTokens(uint256)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _getReward(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    _getAmount(uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    isRealAddress(address)</TD></TR><TR><TD align="left">    isRealValue(uint256)</TD></TR><TR><TD align="left">    isStaker()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    ADMIN_ROLE</TD></TR><TR><TD align="left">    StakersData</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    nftyToken<font color="blue" POINT-SIZE="10"> (NFTYToken)</font></TD></TR><TR><TD align="left">    _NFTYTokenAddress</TD></TR><TR><TD align="left">    _totalStakedToken</TD></TR><TR><TD align="left">    _rewardRate</TD></TR><TR><TD align="left">    _newRewardRate</TD></TR></TABLE> >];

NFTYToken -> ERC20Upgradeable [ label="1" ];
NFTYToken -> OwnableUpgradeable [ label="2" ];
NFTYToken[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>NFTYToken</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize()</TD></TR><TR><TD align="left">    mint(address,uint256)</TD></TR></TABLE> >];

NFTYtokenUpgraded -> ERC20Upgradeable [ label="1" ];
NFTYtokenUpgraded -> OwnableUpgradeable [ label="2" ];
NFTYtokenUpgraded[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>NFTYtokenUpgraded</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    mint(address,uint256)</TD></TR><TR><TD align="left">    burn(uint256)</TD></TR><TR><TD align="left">    burnFromAccount(address,uint256)</TD></TR><TR><TD align="left">    getMyBalance()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    mybalance</TD></TR></TABLE> >];

}